# 워크플로우의 이름을 정의합니다.
name: Build, Push, and Update Deployment

# 워크플로우를 트리거하는 이벤트를 정의합니다.
# 이 워크플로우는 main 브랜치에 대한 푸시 이벤트 또는 main 브랜치로의 풀 리퀘스트 이벤트가 발생할 때마다 트리거
on:
  push:
    branches:
      - main  # main 브랜치에 푸시가 발생하면 실행
  pull_request:
    branches:
      - main  # main 브랜치로의 풀 리퀘스트가 발생하면 실행

# 빌드 작업 정의  
jobs:
  build:
    runs-on: ubuntu-latest  #  build 작업이 정의되며 작업은 최신 버전의 Ubuntu 환경에서 실행됨
    steps:
    # 레포지토리의 코드를 체크아웃합니다.
    # 현재 레포지토리의 코드를 체크아웃하여 빌드와 배포에 필요한 파일들을 가져옴.
    - name: Checkout repository
      uses: actions/checkout@v3

    # Java Development Kit(JDK) 17을 설정합니다.
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # mvnw(Maven Wrapper)에 실행 권한을 부여합니다.
    - name: Grant execute permission for Maven Wrapper
      run: chmod +x ./mvnw

    # Maven 의존성을 캐시하여 빌드 속도를 향상시킵니다. pom.xml 파일에 따라 캐시 키가 생성됨
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    # Maven Wrapper를 사용하여 프로젝트를 빌드. 테스트는 건너 뛰고 빌드만 진행.
    - name: Build with Maven Wrapper
      run: ./mvnw package -DskipTests

    # AWS 자격 증명을 설정합니다.
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
    
    # Amazon ECR(Elastic Container Registry)에 로그인합니다.
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    # Docker 이미지를 빌드하고 ECR에 푸시합니다.
    # ECR_REGISTRY: Amazon ECR 레지스트리 URL.
    # ECR_REPOSITORY: ECR 내 저장소 이름.
    # IMAGE_TAG: GitHub 커밋 SHA를 이미지 태그로 사용하여 이미지의 버전을 관리합니다. 
    # 이 이미지가 빌드되고, 지정된 ECR 리포지토리에 푸시됩니다.
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: 844820972788.dkr.ecr.ap-southeast-1.amazonaws.com # 수정 []포함 내용 삭제후 생성된  registry 입력
	      ECR_REPOSITORY: dsuser-15-cluster-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Kubernetes 배포 YAML 파일(k8s/deployment.yaml)의 image 태그를 새로 빌드되는 이미지 태그로 업데이트합니다.
    - name: Update Deployment YAML
      run: |
        sed -i 's|image: .*|image: 844820972788.dkr.ecr.ap-southeast-1.amazonaws.com/dsuser-15-cluster-repo:${{ github.sha }}|' k8s/deployment.yaml

    # 변경사항이 있으면 커밋하고 푸시합니다.
    # 변경된 k8s/deployment.yaml파일을 git에 push
    - name: Commit and push if there are changes
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'github-actions@github.com'
        git add k8s/deployment.yaml
        git diff --quiet && git diff --staged --quiet || (git commit -m "Update image tag to ${{ github.sha }}"; git push https://${{ secrets.PAT }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }})
        
